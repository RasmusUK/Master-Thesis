@using SpotQuoteBooking.EventSource.Core.ValueObjects.Enums
@using SpotQuoteBooking.EventSource.Web.Data
@using SpotQuoteBooking.EventSource.Application.DTOs
<MudCard>
    <MudCardHeader>
        <MudText Typo="Typo.h6">@Title</MudText>
    </MudCardHeader>
    <MudCardContent>
        <MudGrid>
            <MudItem xs="3">
                <MudTextField @bind-Value="Address.CompanyName" Label="Company name" Clearable="true" />
            </MudItem>
            <MudItem xs="3">
                <MudTextField @bind-Value="Address.Email" Label="Email" Clearable="true" />
            </MudItem>
            <MudItem xs="3">
                <MudTextField @bind-Value="Address.Phone" Label="Phone" Clearable="true" />
            </MudItem>
            <MudItem xs="3">
                <MudTextField @bind-Value="Address.Attention" Label="Attention" Clearable="true" />
            </MudItem>
            <MudFlexBreak />
            <MudItem xs="3">
                <MudAutocomplete T="CountryDto"
                                 @bind-Value="Address.Country"
                                 Label="Country"
                                 Clearable="true"
                                 MaxItems="null"
                                 Required="true"
                                 SearchFunc="SearchCountries" 
                                 ToStringFunc="@(c => c == null ? "" : $"{c.Code} - {c.Name}")"/>
            </MudItem>
            <MudItem xs="3">
                <MudTextField @bind-Value="Address.ZipCode" Label="Zip code" Clearable="true" Required="TransportMode == TransportMode.Courier || TransportMode == TransportMode.Road" />
            </MudItem>
            <MudItem xs="3">
                <MudTextField @bind-Value="Address.City" Label="City" Clearable="true" Required="TransportMode == TransportMode.Courier || TransportMode == TransportMode.Road"/>
            </MudItem>
            <MudFlexBreak />
            <MudItem xs="3">
                <MudTextField @bind-Value="Address.AddressLine1" Label="Address line 1" Clearable="true" />
            </MudItem>
            <MudItem xs="3">
                <MudTextField @bind-Value="Address.AddressLine2" Label="Address line 2" Clearable="true" />
            </MudItem>
            <MudFlexBreak />
            <MudItem xs="3">
                @if (TransportMode == TransportMode.Air)
                {
                    <MudTextField @bind-Value="Address.Airport" Label="Airport" Clearable="true" Required="TransportMode == TransportMode.Air" />
                }
                @if (TransportMode == TransportMode.Sea)
                {
                    <MudTextField @bind-Value="Address.Port" Label="Port" Clearable="true" Required="TransportMode == TransportMode.Sea" />
                }
            </MudItem>
        </MudGrid>
    </MudCardContent>
</MudCard>

@code {
    [Parameter] public string Title { get; set; } = "Address";
    [Parameter] public AddressDto Address { get; set; } = new();
    [Parameter] public EventCallback<AddressDto> AddressChanged { get; set; }
    [Parameter] public TransportMode? TransportMode { get; set; }
    [Parameter] public EventCallback<TransportMode?> TransportModeChanged { get; set; }
    [Parameter] public IEnumerable<CountryDto> Countries { get; set; }
    
    private async Task<IEnumerable<CountryDto>> SearchCountries(string value, CancellationToken cancellationToken) => 
        string.IsNullOrEmpty(value) ? 
            Countries : 
            Countries.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase)
                                 || x.Code.Contains(value, StringComparison.InvariantCultureIgnoreCase));
}
