@page "/snapshots"
@using global::EventSource.Persistence.Interfaces
@using global::EventSource.Application.Interfaces
@using global::EventSource.Application
@using global::EventSource.Infrastructure
@using global::EventSource.Infrastructure.Interfaces
@using global::EventSource.Persistence.Snapshot
@inject ISnapshotService SnapshotService
@inject ISnackbar Snackbar

<MudText Typo="Typo.h5" Class="pt-5 pb-5 ps-5">Snapshots</MudText>

<MudPaper Class="pa-4" Elevation="3">
    <MudStack Spacing="3">

        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateSnapshot">
            Create Snapshot
        </MudButton>

        <MudTable Items="snapshots" Hover="true" Dense="true">
            <HeaderContent>
                <MudTh>Snapshot id</MudTh>
                <MudTh>Event number</MudTh>
                <MudTh>Timestamp</MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.SnapshotId</MudTd>
                <MudTd>@context.EventNumber</MudTd>
                <MudTd>@context.Timestamp.ToString("dd/MM/yyyy HH:mm:ss")</MudTd>
                <MudTd>
                    <MudStack Row="true" Spacing="2">
                        <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="() => RestoreSnapshot(context.SnapshotId)">Restore</MudButton>
                        <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="() => DeleteSnapshot(context.SnapshotId)">Delete</MudButton>
                    </MudStack>
                </MudTd>
            </RowTemplate>
        </MudTable>

    </MudStack>
</MudPaper>

@code {
    private IReadOnlyCollection<SnapshotMetadata> snapshots = new List<SnapshotMetadata>();

    protected override async Task OnInitializedAsync()
    {
        await LoadSnapshots();
    }

    private async Task LoadSnapshots()
    {
        snapshots = await SnapshotService.GetAllSnapshotsAsync();
    }

    private async Task CreateSnapshot()
    {
        try
        {
            var id = await SnapshotService.TakeSnapshotAsync();
            Snackbar.Add($"Snapshot {id} created", Severity.Success);
            await LoadSnapshots();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Snapshot creation failed: {ex.Message}", Severity.Error);
        }
    }

    private async Task RestoreSnapshot(string snapshotId)
    {
        try
        {
            await SnapshotService.RestoreSnapshotAsync(snapshotId);
            Snackbar.Add($"Restored snapshot {snapshotId}", Severity.Info);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Restore failed: {ex.Message}", Severity.Error);
        }
    }

    private async Task DeleteSnapshot(string snapshotId)
    {
        try
        {
            await SnapshotService.DeleteSnapshotAsync(snapshotId);
            Snackbar.Add($"Deleted snapshot {snapshotId}", Severity.Warning);
            await LoadSnapshots();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Delete failed: {ex.Message}", Severity.Error);
        }
    }
}
