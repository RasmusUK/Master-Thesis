@page "/spot-quotes/create"
@page "/spot-quotes/edit/{Id:guid}"
@using global::EventSource.Core.Interfaces
@using SpotQuoteBooking.EventSource.Core
@using Direction = SpotQuoteBooking.Shared.Direction
@inject IRepository<SpotQuoteBooking> SpotQuoteBookingRepository
@inject IRepository<Customer> CustomerRepository
@inject NavigationManager Navigation
@inject ICountryFetcher CountryFetcher

<h3>@(IsNew ? "Create Spot Quote" : "Edit Spot Quote")</h3>

<MudStepper NonLinear>
    <MudStep Title="General info">
        <MudStack>
        <MudCard>
            <MudCardHeader>
                <MudText Typo="Typo.h6">Basic info</MudText>
            </MudCardHeader>
            <MudCardContent>
                <MudGrid>
                    <MudItem xs="3">
                        <MudAutocomplete @bind-Value="@model.TransportMode"
                                         Label="Transport mode"
                                         Clearable="true"
                                         MaxItems="null"
                                         SearchFunc="@SearchTransportModes"/>
                    </MudItem>
                    <MudItem xs="3">
                        <MudAutocomplete @bind-Value="@model.Incoterm"
                                         Label="Incoterm"
                                         Clearable="true"
                                         MaxItems="null"
                                         SearchFunc="@SearchIncoterms"/>
                    </MudItem>
                    <MudItem xs="3">
                        <MudAutocomplete @bind-Value="@model.Customer"
                                         Label="Customers"
                                         Clearable="true"
                                         MaxItems="100"
                                         SearchFunc="@SearchCustomers"/>
                    </MudItem>
                    <MudItem xs="3">
                        <MudStack>
                            <MudToggleGroup T="Direction" SelectionMode="SelectionMode.SingleSelection" @bind-Value="@model.Direction">
                                <MudToggleItem Value="@Direction.Import" Text="Import"/>
                                <MudToggleItem Value="@Direction.Export" Text="Export"/>
                            </MudToggleGroup>
                        </MudStack>
                    </MudItem>
                </MudGrid>
            </MudCardContent>
        </MudCard>

        <AddressCard Title="From"
                     @bind-Address="@model.AddressFrom"
                     @bind-TransportMode="@model.TransportMode"
                     SearchCountries="@SearchCountries" />
        <AddressCard Title="To"
                     @bind-Address="@model.AddressTo"
                     @bind-TransportMode="@model.TransportMode"
                     SearchCountries="@SearchCountries" />
        </MudStack>
    </MudStep>
    <MudStep Title="Write the tests">If you write the tests first you will design a better API when you write the code</MudStep>
    <MudStep Title="Write the documentation" SecondaryText="... or not">Some consider writing readable code more important than writing documentation.</MudStep>
</MudStepper>


<MudButton OnClick="@Save">@(IsNew ? "Create" : "Update")</MudButton>

@code {
    [Parameter] public Guid? Id { get; set; }

    private SpotQuoteBooking model = new()
    {
        AddressFrom = new Address(),
        AddressTo = new Address()
    };
    private IEnumerable<Customer> customers = new List<Customer>();
    private IEnumerable<Country> countries = new List<Country>();
    private readonly List<TransportMode> transportModes = TransportMode.GetAll().ToList();
    
    private bool IsNew => Id == null;

    protected override async Task OnInitializedAsync()
    {
        customers = await CustomerRepository.ReadAllAsync();
        countries = CountryFetcher.GetCountries();
        if (!IsNew)
        {
            var existing = await SpotQuoteBookingRepository.ReadByIdAsync(Id!.Value);
            if (existing is not null)
                model = existing;
        }

        model.Direction ??= Direction.Import;
    }

    private async Task Save()
    {
        if (IsNew)
            await SpotQuoteBookingRepository.CreateAsync(model);
        else
            await SpotQuoteBookingRepository.UpdateAsync(model);

        Navigation.NavigateTo("/spot-quotes");
    }

    private async Task<IEnumerable<TransportMode>> SearchTransportModes(string value, CancellationToken cancellationToken) => 
        string.IsNullOrEmpty(value) ? 
            transportModes : 
            transportModes.Where(x => x.Value.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    
    private async Task<IEnumerable<Incoterm>> SearchIncoterms(string value, CancellationToken cancellationToken) => 
        string.IsNullOrEmpty(value) ? 
            Incoterm.GetAll() : 
            Incoterm.GetAll().Where(x => x.Value.Contains(value, StringComparison.InvariantCultureIgnoreCase)); 
    
    private async Task<IEnumerable<Customer>> SearchCustomers(string value, CancellationToken cancellationToken) => 
        string.IsNullOrEmpty(value) ? 
            customers : 
            customers.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase)); 
    
    private async Task<IEnumerable<Country>> SearchCountries(string value, CancellationToken cancellationToken) => 
        string.IsNullOrEmpty(value) ? 
            countries : 
            countries.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase)
                                 || x.Code.Contains(value, StringComparison.InvariantCultureIgnoreCase)); 
}