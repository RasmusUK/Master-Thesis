@page "/spot-quotes/create"
@page "/spot-quotes/edit/{Id:guid}"
@using global::EventSource.Core.Interfaces
@using SpotQuoteBooking.EventSource.Core
@using Direction = SpotQuoteBooking.Shared.Direction
@using System.Collections.ObjectModel
@inject IRepository<SpotQuoteBooking> SpotQuoteBookingRepository
@inject IRepository<Customer> CustomerRepository
@inject NavigationManager Navigation
@inject ICountryFetcher CountryFetcher

<MudText Typo="Typo.h5" Class="pt-5 pb-5 ps-5">@(IsNew ? "Create Spot Quote" : "Edit Spot Quote")</MudText>

<MudStepper OnPreviewInteraction="OnPreviewInteraction">
<MudStep Title="General info">
    <MudForm @ref=form1>
        <MudStack>
            <MudCard>
                <MudCardHeader>
                    <MudText Typo="Typo.h6">Basic info</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="3">
                            <MudSelect @bind-Value="model.TransportMode"
                                       Label="Transport mode"
                                       Clearable="true"
                                       Dense="true"
                                       Required="true">
                                @foreach (var mode in TransportMode.GetAll())
                                {
                                    <MudSelectItem Value="@mode">@mode</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="3">
                            <MudSelect @bind-Value="model.Incoterm"
                                       Label="Incoterm"
                                       Clearable="true"
                                       Dense="true">
                                @foreach (var incoterm in Incoterm.GetAll())
                                {
                                    <MudSelectItem Value="@incoterm">@incoterm</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="3">
                            <MudAutocomplete @bind-Value="@SelectedCustomer"
                                             Label="Customer"
                                             Clearable="true"
                                             MaxItems="100"
                                             Required="true"
                                             SearchFunc="@SearchCustomers"/>
                        </MudItem>
                        <MudItem xs="3">
                            <MudStack>
                                <MudToggleGroup T="Direction" SelectionMode="SelectionMode.SingleSelection" @bind-Value="@model.Direction">
                                    <MudToggleItem Value="@Direction.Import" Text="Import"/>
                                    <MudToggleItem Value="@Direction.Export" Text="Export"/>
                                </MudToggleGroup>
                            </MudStack>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudCard>
            <AddressCard Title="From"
                         @bind-Address="@model.AddressFrom"
                         @bind-TransportMode="@model.TransportMode"
                         SearchCountries="@SearchCountries"/>
            <AddressCard Title="To"
                         @bind-Address="@model.AddressTo"
                         @bind-TransportMode="@model.TransportMode"
                         SearchCountries="@SearchCountries"/>
        </MudStack>
    </MudForm>    
</MudStep>
    
<MudStep Title="Shipping details" SecondaryText="@($"{collis.Sum(x => x.NumberOfUnits)} unit(s) / {model.TotalWeight} kg / {model.TotalCbm} m3")">
    <MudStack>
        <MudDataGrid T="Colli" Items="collis" ReadOnly="false" Bordered="true" Dense="true" EditMode="DataGridEditMode.Cell" EditTrigger="DataGridEditTrigger.OnRowClick" CanceledEditingItem="@ShippingDetailsEdit" CommittedItemChanges="@ShippingDetailsEdit">
            <Columns>
                <PropertyColumn Property="x => x.NumberOfUnits" Title="No. of units" AggregateDefinition="@nrOfCollisAggregateDefinition"/>
                <PropertyColumn Property="x => x.ColliType" Title="Colli type">
                    <EditTemplate>
                        <MudSelect T="ColliType" @bind-Value="@context.Item.ColliType">
                            @foreach (var item in ColliType.GetByTransportMode(model.TransportMode))
                            {
                                <MudSelectItem Value="@item">@item</MudSelectItem>
                            }
                        </MudSelect>
                    </EditTemplate>
                </PropertyColumn>
                <PropertyColumn Property="x => x.Length" Title="Length (cm)"/>
                <PropertyColumn Property="x => x.Width" Title="Width (cm)"/>
                <PropertyColumn Property="x => x.Height" Title="Height (cm)"/>
                <PropertyColumn Editable="false" Property="x => x.Cbm" Title="CBM" AggregateDefinition="@sumAggregrateDefinition"/>
                <PropertyColumn Property="x => x.Weight" Title="Weight (kg)" AggregateDefinition="@sumAggregrateDefinition"/>
                <TemplateColumn StickyRight="true">
                    <HeaderTemplate>
                        <MudIconButton OnClick="@AddColli" Icon="@Icons.Material.Outlined.Add" Color="Color.Success"/>
                    </HeaderTemplate>
                    <EditTemplate>
                        <MudIconButton OnClick="@(() => RemoveColli(context.Item))" Icon="@Icons.Material.Outlined.Delete" Color="Color.Error"/>
                    </EditTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
        <MudCard>
            <MudCardContent>
                <MudGrid>
                    <MudItem xs="6">
                        <MudTextField T="string" Label="Description" Variant="Variant.Outlined" @bind-Value="@model.ShippingDetails.Description" AutoGrow Lines="5"/>
                    </MudItem>
                    <MudItem xs="6">
                        <MudTextField T="string" Label="References" Variant="Variant.Outlined" @bind-Value="@model.ShippingDetails.References" AutoGrow Lines="5"/>
                    </MudItem>
                    <MudItem xs="6">
                        <MudDatePicker Label="Ready to load" Editable="true" DateFormat="dd/MM/yyyy HH:mm" Clearable="true" Placeholder="dd/mm/yy hh:mm" @bind-Date="@model.ShippingDetails.ReadyToLoadDate"/>
                    </MudItem>
                    <MudItem xs="6">
                        <MudSelect T="BookingProperty" Label="Possible reference options" MultiSelection="true" SelectedValues="@selectedBookingProperties" SelectedValuesChanged="@OnBookingPropertiesChanged">
                            @foreach (var item in BookingProperty.GetAll())
                            {
                                <MudSelectItem Value="@item">@item</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                </MudGrid>
            </MudCardContent>
        </MudCard>
    </MudStack>
        
</MudStep>
<MudStep Title="Buying rates">
        
</MudStep>
<MudStep Title="Quote">
    <MudStack>
        <MudStack Justify="Justify.FlexEnd" Row="true">
            <MudButton StartIcon="@Icons.Material.Filled.Add" OnClick="@CreateQuote" Variant="Variant.Filled">
                Add
            </MudButton>
        </MudStack>
        @foreach (var quote in model.Quotes)
        {
            <MudCard>
                <MudCardHeader>
                    <MudGrid>
                        <MudItem xs="3">
                            <MudText Typo="Typo.h6">@(quote.SupplierService?.ToString() ?? quote.ForwarderService?.ToString() ?? quote.Supplier?.ToString())</MudText>
                        </MudItem>
                        <MudItem xs="3"/>
                        <MudItem xs="2">
                            <MudNumericField Value="quote.TotalPrice" Readonly="true" Label="Total price" Step=".1" Format="N2" HideSpinButtons="true"/>
                        </MudItem>
                        <MudItem xs="2">
                            <MudNumericField Value="quote.TotalProfit" Readonly="true" Label="Total estimated profit" Step=".1" Format="N2" HideSpinButtons="true"/>
                        </MudItem>
                        <MudItem xs="1"/>
                        <MudItem xs="1">
                            <MudIconButton OnClick="@(() => RemoveQuote(quote))" Icon="@Icons.Material.Outlined.Delete" Color="Color.Error"/>
                        </MudItem>
                    </MudGrid>
                </MudCardHeader>
                <MudDivider/>
                <MudCardContent>
                    <MudStack>
                        <MudGrid>
                            <MudItem xs="4">
                                <MudSelect Value="quote.Supplier"
                                           Label="Supplier"
                                           Clearable="true"
                                           Dense="true"
                                           ValueChanged="@((Supplier newValue) => OnSupplierChanged(newValue, quote))">
                                    @foreach (var supplier in ForwarderService.GetSuppliersByTransportMode(model.TransportMode))
                                    {
                                        <MudSelectItem Value="@supplier">@supplier</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="4">
                                <MudSelect Value="quote.ForwarderService"
                                           Label="Forwarder service"
                                           Clearable="true"
                                           Dense="true"
                                           Disabled="quote.Supplier == null"
                                           ValueChanged="@((ForwarderService newValue) => OnForwarderServiceChanged(newValue, quote))">
                                    @foreach (var forwarderService in ForwarderService.GetBySupplier(quote.Supplier))
                                    {
                                        <MudSelectItem Value="@forwarderService">@forwarderService</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="4">
                                <MudSelect @bind-Value="quote.SupplierService"
                                           Label="Supplier service"
                                           Clearable="true"
                                           Dense="true"
                                           Disabled="quote.ForwarderService == null">
                                    @foreach (var supplierService in SupplierService.GetByForwarderService(quote.ForwarderService))
                                    {
                                        <MudSelectItem Value="@supplierService">@supplierService</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="3">
                                <MudNumericField @bind-Value="quote.Profit.Value" Label="Total profit" Step=".1" Format="N2"/>
                            </MudItem>
                            <MudItem xs="1">
                                <MudStack>
                                    <MudToggleGroup T="bool" SelectionMode="SelectionMode.SingleSelection" @bind-Value="@quote.Profit.IsPercentage">
                                        <MudToggleItem Value="true" Text="%"/>
                                        <MudToggleItem Value="false" Text="#"/>
                                    </MudToggleGroup>
                                </MudStack>
                            </MudItem>
                            <MudItem xs="2">
                                <MudCheckBox @bind-Value="quote.IsAllIn" Color="Color.Primary">All-in</MudCheckBox>
                            </MudItem>
                        </MudGrid>
                        <MudDivider/>
                        <MudDataGrid T="Cost" Items="@quote.Costs" ReadOnly="false" EditMode="DataGridEditMode.Cell" Bordered="true" Dense="true" EditTrigger="DataGridEditTrigger.OnRowClick" CanceledEditingItem="CostEdit" CommittedItemChanges="CostEdit">
                            <ColGroup>
                                @for (var i = 0; i < 4; i++)
                                {
                                    <col style="background: var(--mud-palette-tertiary); color: black; font-weight: bold"/>
                                }
                                @for (var i = 0; i < 8; i++)
                                {
                                    <col style="background: var(--mud-palette-secondary); color: black"/>
                                }
                            </ColGroup>
                            <Columns>
                                <PropertyColumn Property="x => x.SupplierCost.ChargeType" Title="Charge type">
                                    <EditTemplate>
                                        <MudSelect T="ChargeType" @bind-Value="@context.Item.SupplierCost.ChargeType">
                                            @foreach (var item in ChargeType.GetByTransportMode(model.TransportMode))
                                            {
                                                <MudSelectItem Value="@item">@item</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </EditTemplate>
                                </PropertyColumn>
                                <PropertyColumn Property="x => x.SupplierCost.CostType" Title="Cost type">
                                    <EditTemplate>
                                        <MudSelect T="CostType" @bind-Value="@context.Item.SupplierCost.CostType">
                                            @foreach (var item in CostType.GetAll())
                                            {
                                                <MudSelectItem Value="@item">@item</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </EditTemplate>
                                </PropertyColumn>
                                <PropertyColumn Property="x => x.SupplierCost.Value" Title="Value"/>
                                <PropertyColumn Property="x => x.SupplierCost.CalculatedValue" Title="Calculated value" Editable="false" Format="N2"/>
                                <PropertyColumn Property="x => x.SellingCost.ChargeType" Title="Charge type">
                                    <EditTemplate>
                                        <MudSelect T="ChargeType" @bind-Value="@context.Item.SellingCost.ChargeType">
                                            @foreach (var item in ChargeType.GetByTransportMode(model.TransportMode))
                                            {
                                                <MudSelectItem Value="@item">@item</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </EditTemplate>
                                </PropertyColumn>
                                <PropertyColumn Property="x => x.SellingCost.CostType" Title="Cost type">
                                    <EditTemplate>
                                        <MudSelect T="CostType" @bind-Value="@context.Item.SellingCost.CostType">
                                            @foreach (var item in CostType.GetAll())
                                            {
                                                <MudSelectItem Value="@item">@item</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </EditTemplate>
                                </PropertyColumn>
                                <PropertyColumn Property="x => x.SellingCost.MinimumValue" Title="Min"/>
                                <PropertyColumn Property="x => x.SellingCost.Value" Title="Value"/>
                                <PropertyColumn Property="x => x.SellingCost.MaximumValue" Title="Max"/>
                                <PropertyColumn Property="x => x.SellingCost.Profit" Title="Profit"/>
                                <PropertyColumn Property="x => x.SellingCost.TotalValue" Title="Total" Editable="false" Format="N2"/>
                                <PropertyColumn Property="x => x.SellingCost.Comment" Title="Comment"/>
                                <TemplateColumn StickyRight="true">
                                    <HeaderTemplate>
                                        <MudIconButton OnClick="@(() => AddCost(quote))" Icon="@Icons.Material.Outlined.Add" Color="Color.Success"/>
                                    </HeaderTemplate>
                                    <EditTemplate>
                                        <MudIconButton OnClick="@(() => RemoveCost(context.Item, quote))" Icon="@Icons.Material.Outlined.Delete" Color="Color.Error"/>
                                    </EditTemplate>
                                </TemplateColumn>
                            </Columns>
                        </MudDataGrid>
                        <MudStack Row="true" Justify="Justify.SpaceBetween">
                            <MudStack Row="true">
                                <MudAvatar Size="Size.Small" Color="Color.Tertiary"></MudAvatar>
                                <MudText>Supplier</MudText>
                            </MudStack>
                            <MudStack Row="true">
                                <MudText>Selling</MudText>
                                <MudAvatar Size="Size.Small" Color="Color.Secondary"></MudAvatar>
                            </MudStack>
                        </MudStack>
                        <MudStack Row="true">
                            <MudTextField T="string" Label="Comments external" Variant="Variant.Outlined" @bind-Value="@quote.CommentsExternal" AutoGrow Lines="3"/>
                            <MudTextField T="string" Label="Comments internal" Variant="Variant.Outlined" @bind-Value="@quote.CommentsInternal" AutoGrow Lines="3"/>
                        </MudStack>
                    </MudStack>
                </MudCardContent>
            </MudCard>
        }
    </MudStack>
</MudStep>
<MudStep Title="Validity & recipients">
    <MudGrid>
        <MudItem xs="6">
            <MudSelect Label="Mail recipients" MultiSelection="true" SelectedValues="@SelectedMailRecipients">
                @foreach (var item in SelectedCustomer.Users)
                {
                    <MudSelectItem Value="@item">@item</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="6">
            <MudDatePicker Label="Quote validity" Editable="true" DateFormat="dd/MM/yyyy HH:mm" Clearable="true" Placeholder="dd/mm/yy hh:mm" @bind-Date="@model.ValidUntil"/>
        </MudItem>
        <MudItem xs="3">
            <MudStack>
                <MudCheckBox @bind-Value="model.MailOptions.SendCopyToMe" Color="Color.Primary">Send copy to me</MudCheckBox>
                <MudCheckBox @bind-Value="model.MailOptions.ShowCostSpec" Color="Color.Primary">Show cost specification in mail</MudCheckBox>
            </MudStack>
        </MudItem>
        <MudItem xs="9"/>
        <MudItem xs="6">
            <MudTextField T="string" Label="Comments for spot quote mail" Variant="Variant.Outlined" @bind-Value="model.MailOptions.Comments" AutoGrow Lines="3"/>
        </MudItem>
        <MudItem xs="6">
            <MudTextField T="string" Label="Comments for spot quote internal" Variant="Variant.Outlined" @bind-Value="model.InternalComments" AutoGrow Lines="3"/>
        </MudItem>
    </MudGrid>
</MudStep>
</MudStepper>

@code {
    [Inject] 
    IDialogService DialogService { get; set; }
    [Parameter] public Guid? Id { get; set; }
    ObservableCollection<Colli> collis = new();

    private SpotQuoteBooking model = new()
    {
        AddressFrom = new Address(),
        AddressTo = new Address()
    };
    private IEnumerable<Customer> customers = new List<Customer>();
    private IEnumerable<Country> countries = new List<Country>();
    private List<BookingProperty> selectedBookingProperties = new();
    private Customer? SelectedCustomer;
    private IEnumerable<User> SelectedMailRecipients = new List<User>();
    private bool IsNew => Id == null;
    private MudForm form1;
    
    protected override async Task OnInitializedAsync()
    {
        customers = await CustomerRepository.ReadAllAsync();
        countries = CountryFetcher.GetCountries();
        if (!IsNew)
        {
            var existing = await SpotQuoteBookingRepository.ReadByIdAsync(Id!.Value);
            if (existing is not null)
            {
                model = existing;
                collis = new ObservableCollection<Colli>(model.ShippingDetails.Collis);
            }
        }

        model.Direction ??= Direction.Import;
        selectedBookingProperties = model.ShippingDetails.BookingProperties.ToList();
        if (model.Quotes.Count == 0)
            model.Quotes.Add(new Quote());
    }

    private async Task Save()
    {
        if (IsNew)
            await SpotQuoteBookingRepository.CreateAsync(model);
        else
            await SpotQuoteBookingRepository.UpdateAsync(model);

        Navigation.NavigateTo("/spot-quotes");
    }
    
    private async Task<IEnumerable<Customer>> SearchCustomers(string value, CancellationToken cancellationToken) => 
        string.IsNullOrEmpty(value) ? 
            customers : 
            customers.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase)); 
    
    private async Task<IEnumerable<Country>> SearchCountries(string value, CancellationToken cancellationToken) => 
        string.IsNullOrEmpty(value) ? 
            countries : 
            countries.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase)
                                 || x.Code.Contains(value, StringComparison.InvariantCultureIgnoreCase));

    private void AddColli() => collis.Add(new Colli {NumberOfUnits = 1});
    
    private void RemoveColli(Colli colli) => collis.Remove(colli);

    private void AddCost(Quote quote) => quote.Costs.Add(new Cost(model.TotalWeight, model.TotalCbm));
    
    private void RemoveCost(Cost cost, Quote quote) => quote.Costs.Remove(cost);
    
    private AggregateDefinition<Colli> nrOfCollisAggregateDefinition = new()
    {
        Type = AggregateType.Sum,
        DisplayFormat = "Totals: {value}"
    };
    
    private AggregateDefinition<Colli> sumAggregrateDefinition = new()
    {
        Type = AggregateType.Sum,
        DisplayFormat = "{value}"
    };
    
    private void OnBookingPropertiesChanged(IEnumerable<BookingProperty> newValues)
    {
        selectedBookingProperties = newValues.ToList();
        model.ShippingDetails.BookingProperties = selectedBookingProperties;
    }

    private void ShippingDetailsEdit(Colli colli)
    {
        model.ShippingDetails.Collis = collis.ToList();
        foreach (var cost in model.Quotes.SelectMany(q => q.Costs))
        {
            cost.SupplierCost.Weight = model.TotalWeight;
            cost.SupplierCost.Cbm = model.TotalCbm;
            cost.SellingCost.Weight = model.TotalWeight;
            cost.SellingCost.Cbm = model.TotalCbm;
        }
        StateHasChanged();
    }

    private void CostEdit(Cost cost)
    {
        StateHasChanged();
    }
    
    private void OnSupplierChanged(Supplier newSupplier, Quote quote)
    {
        quote.Supplier = newSupplier;
        quote.ForwarderService = null;
        quote.SupplierService = null;
    }

    private void OnForwarderServiceChanged(ForwarderService newService, Quote quote)
    {
        quote.ForwarderService = newService;
        quote.SupplierService = null;
    }

    private void RemoveQuote(Quote quote)
    {
        model.Quotes.Remove(quote);
    }

    private void CreateQuote()
    {
        model.Quotes.Add(new Quote());
    }
    
    private async Task OnPreviewInteraction(StepperInteractionEventArgs arg)
    {
        if (arg.Action == StepAction.Complete) 
            await ControlStepCompletion(arg);
    }
    
    private async Task ControlStepCompletion(StepperInteractionEventArgs arg)
    {
        switch (arg.StepIndex) {
            case 0:
                await form1.Validate();
                if (!form1.IsValid) 
                {
                    await DialogService.ShowMessageBox("Error", "You have not filled in all required fields in step 1");
                    arg.Cancel = true;
                }
                break;
        }
    }
}