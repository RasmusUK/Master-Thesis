@page "/spot-quotes/create"
@page "/spot-quotes/edit/{Id:guid}"
@using global::EventSource.Core.Interfaces
@using SpotQuoteBooking.EventSource.Core
@using Direction = SpotQuoteBooking.Shared.Direction
@using System.Collections.ObjectModel
@inject IRepository<SpotQuoteBooking> SpotQuoteBookingRepository
@inject IRepository<Customer> CustomerRepository
@inject NavigationManager Navigation
@inject ICountryFetcher CountryFetcher

<MudText Typo="Typo.h5" Class="pt-5 pb-5 ps-5">@(IsNew ? "Create Spot Quote" : "Edit Spot Quote")</MudText>

<MudStepper NonLinear>
    <MudStep Title="General info">
        <MudStack>
        <MudCard>
            <MudCardHeader>
                <MudText Typo="Typo.h6">Basic info</MudText>
            </MudCardHeader>
            <MudCardContent>
                <MudGrid>
                    <MudItem xs="3">
                        <MudAutocomplete @bind-Value="@model.TransportMode"
                                         Label="Transport mode"
                                         Clearable="true"
                                         MaxItems="null"
                                         SearchFunc="@SearchTransportModes"/>
                    </MudItem>
                    <MudItem xs="3">
                        <MudAutocomplete @bind-Value="@model.Incoterm"
                                         Label="Incoterm"
                                         Clearable="true"
                                         MaxItems="null"
                                         SearchFunc="@SearchIncoterms"/>
                    </MudItem>
                    <MudItem xs="3">
                        <MudAutocomplete @bind-Value="@model.Customer"
                                         Label="Customers"
                                         Clearable="true"
                                         MaxItems="100"
                                         SearchFunc="@SearchCustomers"/>
                    </MudItem>
                    <MudItem xs="3">
                        <MudStack>
                            <MudToggleGroup T="Direction" SelectionMode="SelectionMode.SingleSelection" @bind-Value="@model.Direction">
                                <MudToggleItem Value="@Direction.Import" Text="Import"/>
                                <MudToggleItem Value="@Direction.Export" Text="Export"/>
                            </MudToggleGroup>
                        </MudStack>
                    </MudItem>
                </MudGrid>
            </MudCardContent>
        </MudCard>

        <AddressCard Title="From"
                     @bind-Address="@model.AddressFrom"
                     @bind-TransportMode="@model.TransportMode"
                     SearchCountries="@SearchCountries" />
        <AddressCard Title="To"
                     @bind-Address="@model.AddressTo"
                     @bind-TransportMode="@model.TransportMode"
                     SearchCountries="@SearchCountries" />
        </MudStack>
    </MudStep>
    <MudStep Title="Shipping details">
        <MudStack>
            <MudDataGrid T="Colli" Items="collis" ReadOnly="false" EditMode="DataGridEditMode.Cell">
                <Columns>
                    <PropertyColumn Property="x => x.NumberOfUnits" Title="No. of units" AggregateDefinition="@nrOfCollisAggregateDefinition"/>
                    <PropertyColumn Property="x => x.ColliType" Title="Colli type">
                        <EditTemplate>
                            <MudSelect T="ColliType" @bind-Value="@context.Item.ColliType">
                                @foreach (var item in ColliType.GetAll())
                                {
                                    <MudSelectItem Value="@item">@item.Value</MudSelectItem>
                                }
                            </MudSelect>
                        </EditTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.Length" Title="Length (cm)"/>
                    <PropertyColumn Property="x => x.Width" Title="Width (cm)"/>
                    <PropertyColumn Property="x => x.Height" Title="Height (cm)"/>
                    <PropertyColumn Property="x => x.Cbm" Title="CBM" AggregateDefinition="@sumAggregrateDefinition"/>
                    <PropertyColumn Property="x => x.Weight" Title="Weight (kg)" AggregateDefinition="@sumAggregrateDefinition"/>
                    <TemplateColumn>
                        <HeaderTemplate>
                            <MudIconButton OnClick="@AddColli" Icon="@Icons.Material.Outlined.Add" Color="Color.Success"/>
                        </HeaderTemplate>
                        <EditTemplate>
                            <MudIconButton OnClick="@(() => RemoveColli(context.Item))" Icon="@Icons.Material.Outlined.Delete" Color="Color.Error"/>
                        </EditTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
            <MudCard>
                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="6">
                            <MudTextField T="string" Label="Description" Variant="Variant.Outlined" @bind-Value="@model.ShippingDetails.Description" AutoGrow Lines="5"/>
                        </MudItem>
                        <MudItem xs="6">
                            <MudTextField T="string" Label="References" Variant="Variant.Outlined" @bind-Value="@model.ShippingDetails.References" AutoGrow Lines="5"/>
                        </MudItem>
                        <MudItem xs="6">
                            <MudDatePicker Label="Ready to load" Editable="true" DateFormat="dd/MM/yyyy HH:mm" Clearable="true" Placeholder="dd/mm/yy hh:mm" @bind-Date="@model.ShippingDetails.ReadyToLoadDate"/>
                        </MudItem>
                        <MudItem xs="6">
                            <MudSelect T="string" Label="Possible reference options" MultiSelection="true" ValueChanged="OnReferenceSelected" @bind-SelectedValues="@selectedReferenceOptions">
                                @foreach (var item in possibleReferenceOptions)
                                {
                                    <MudSelectItem T="string" Value="@item">@item</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudCard>
           
        </MudStack>
        
    </MudStep>
    <MudStep Title="Buying rates">
        
    </MudStep>
    <MudStep Title="Quote">
            
    </MudStep>
    <MudStep Title="Validity & recipients">
            
    </MudStep>
    
</MudStepper>


<MudButton OnClick="@Save">@(IsNew ? "Create" : "Update")</MudButton>

@code {
    [Parameter] public Guid? Id { get; set; }
    ObservableCollection<Colli> collis = new();

    private SpotQuoteBooking model = new()
    {
        AddressFrom = new Address(),
        AddressTo = new Address()
    };
    private IEnumerable<Customer> customers = new List<Customer>();
    private IEnumerable<Country> countries = new List<Country>();
    private readonly IEnumerable<TransportMode> transportModes = TransportMode.GetAll().ToList();
    
    private readonly IEnumerable<string> possibleReferenceOptions = new List<string>
    {
        "Neutral delivery", "Non-stackable", "Export declaration"
    };
    
    private IEnumerable<string> selectedReferenceOptions = new List<string>();
    
    private bool IsNew => Id == null;

    protected override async Task OnInitializedAsync()
    {
        customers = await CustomerRepository.ReadAllAsync();
        countries = CountryFetcher.GetCountries();
        if (!IsNew)
        {
            var existing = await SpotQuoteBookingRepository.ReadByIdAsync(Id!.Value);
            if (existing is not null)
            {
                model = existing;
                collis = new ObservableCollection<Colli>(model.ShippingDetails.Collis);
            }
        }

        model.Direction ??= Direction.Import;
    }

    private async Task Save()
    {
        if (IsNew)
            await SpotQuoteBookingRepository.CreateAsync(model);
        else
            await SpotQuoteBookingRepository.UpdateAsync(model);

        Navigation.NavigateTo("/spot-quotes");
    }

    private async Task<IEnumerable<TransportMode>> SearchTransportModes(string value, CancellationToken cancellationToken) => 
        string.IsNullOrEmpty(value) ? 
            transportModes : 
            transportModes.Where(x => x.Value.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    
    private async Task<IEnumerable<Incoterm>> SearchIncoterms(string value, CancellationToken cancellationToken) => 
        string.IsNullOrEmpty(value) ? 
            Incoterm.GetAll() : 
            Incoterm.GetAll().Where(x => x.Value.Contains(value, StringComparison.InvariantCultureIgnoreCase)); 
    
    private async Task<IEnumerable<Customer>> SearchCustomers(string value, CancellationToken cancellationToken) => 
        string.IsNullOrEmpty(value) ? 
            customers : 
            customers.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase)); 
    
    private async Task<IEnumerable<Country>> SearchCountries(string value, CancellationToken cancellationToken) => 
        string.IsNullOrEmpty(value) ? 
            countries : 
            countries.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase)
                                 || x.Code.Contains(value, StringComparison.InvariantCultureIgnoreCase));

    void AddColli() => collis.Add(new Colli {NumberOfUnits = 1});
    
    void RemoveColli(Colli colli) => collis.Remove(colli);
    
    AggregateDefinition<Colli> nrOfCollisAggregateDefinition = new()
    {
        Type = AggregateType.Sum,
        DisplayFormat = "Totals: {value}"
    };
    
    AggregateDefinition<Colli> sumAggregrateDefinition = new()
    {
        Type = AggregateType.Sum,
        DisplayFormat = "{value}"
    };
    
    private void OnReferenceSelected(string value)
    {
        var existing = model.ShippingDetails.References?
            .Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries)
            .Where(x => !possibleReferenceOptions.Contains(x))
            .ToList() ?? new List<string>();

        existing.AddRange(selectedReferenceOptions);

        model.ShippingDetails.References = string.Join(", ", existing.Distinct());
    }
}