@page "/events/{Id:guid}"
@using global::EventSourcingFramework.Core.Interfaces
@inject IEventStore EventStore;

<MudText Typo="Typo.h5" Class="pt-5 pb-5 ps-5">Event</MudText>

<MudGrid>
    <MudItem xs="4">
        <MudStack>
            <MudTextField T="Guid?" Label="Id" Variant="Variant.Outlined" ReadOnly="true"
                          Value="e?.Id"/>
            <MudTextField T="long?" Label="Number" Variant="Variant.Outlined" ReadOnly="true"
                                      Value="e?.EventNumber"/>
            <MudTextField T="Guid?" Label="Entity id" Variant="Variant.Outlined"
                          Value="e?.EntityId" ReadOnly="true"/>
            <MudTextField T="string" Label="Type" Variant="Variant.Outlined"
                          Value="e?.Typename" ReadOnly="true"/>
            <MudTextField T="bool?" Label="Is compensation" Variant="Variant.Outlined"
                                      Value="e?.Compensation" ReadOnly="true"/>
            <MudDatePicker Label="Timestamp" DateFormat="dd/MM/yyyy HH:mm" Variant="Variant.Outlined"
                           Placeholder="dd/mm/yy hh:mm" Date="e?.Timestamp" ReadOnly="true"/>
        </MudStack>
    </MudItem>
    <MudItem xs="8">
        <MudTextField T="string" Label="Content" Variant="Variant.Outlined"
                      Value="e?.ToString()" Lines="30" ReadOnly="true"/>
    </MudItem>
</MudGrid>

@code {
    [Parameter] public Guid Id { get; set; }
    IEvent? e;
    
    protected override async Task OnInitializedAsync()
    {
        e = await EventStore.GetEventByIdAsync(Id);
    }
}